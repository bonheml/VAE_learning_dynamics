#!/usr/bin/env python
import logging
import hydra
from hydra.utils import instantiate
import numpy as np
from omegaconf import OmegaConf
from vae_ld.learning_dynamics.utils import get_file_list, get_model_filename, get_model_epoch
from vae_ld.learning_dynamics.variable_filter import filter_variables

logger = logging.getLogger("filter_variables")


@hydra.main(config_path="config", config_name="filter_variables")
def filter_vars(cfg):
    logger.info("Experiment config:\n{}".format(OmegaConf.to_yaml(cfg)))
    random_state = np.random.RandomState(cfg.seed)

    logger.info("Instantiating {} dataset".format(cfg.dataset.name))
    dataset = instantiate(cfg.dataset)
    samples = np.unique(dataset.sample(cfg.n_samples, random_state)[1], axis=0)

    logger.info("Looking for model folders in {}".format(cfg.model_path))
    model_files = get_file_list(cfg.model_path)
    models_info = {"model_name": cfg.model_name, "param_name": cfg.param_name, "param_value": cfg.param_value,
                   "model_seed": cfg.model_seed}
    agg_fname = "{}_{}_seed_{}.tsv".format(cfg.model_name, cfg.param_value, cfg.model_seed)

    for i, m in enumerate(model_files):
        save_file = "{}.tsv".format(get_model_filename(m, cfg.model_name, cfg.param_value))
        models_info["model_epoch"] = get_model_epoch(m, cfg.dataset.name)
        df = filter_variables(samples, m, save_file, var_threshold=cfg.var_threshold,
                              mean_error_range=cfg.mean_error_range, batch_size=cfg.batch_size)
        for k, v in models_info.items():
            df[k] = v
        if i == 0:
            df.to_csv(agg_fname, index=False)
        else:
            df.to_csv(agg_fname, mode="a", header=False, index=False)


if __name__ == "__main__":
    filter_vars()
