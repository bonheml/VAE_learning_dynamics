#!/usr/bin/env python
import logging
import hydra
from hydra.utils import instantiate
import numpy as np
import tensorflow as tf
from omegaconf import OmegaConf

from vae_ld.data.util import get_unique_samples
from vae_ld.learning_dynamics.utils import get_file_list, get_model_filename, get_model_epoch, \
    get_encoder_latents_activations, prepare_activations
from vae_ld.learning_dynamics.variable_filter import filter_variables

logger = logging.getLogger("filter_variables")


@hydra.main(config_path="config", config_name="filter_variables")
def filter_vars(cfg):
    logger.info("Experiment config:\n{}".format(OmegaConf.to_yaml(cfg)))
    random_state = np.random.RandomState(cfg.seed)

    logger.info("Instantiating {} dataset".format(cfg.dataset.name))
    sampler = instantiate(cfg.sampling)
    samples = get_unique_samples(sampler[0][0])

    logger.info("Looking for model folders in {}".format(cfg.model_path))
    models_info = {"model_name": cfg.model_name, "param_name": cfg.param_name, "param_value": cfg.param_value,
                   "model_seed": cfg.model_seed}
    agg_fname = "{}_{}_seed_{}.tsv".format(cfg.model_name, cfg.param_value, cfg.model_seed)


    save_file = "{}.tsv".format(get_model_filename(cfg.model_path, cfg.model_name, cfg.param_value))
    model = tf.keras.models.load_model(cfg.model_path)
    _, acts, _ = get_encoder_latents_activations(samples, None, model)
    var_acts = prepare_activations(acts[1])
    df = filter_variables(var_acts, save_file, var_threshold=cfg.var_threshold,
                          mean_error_range=cfg.mean_error_range)
    for k, v in models_info.items():
        df[k] = v
    df.to_csv(agg_fname, index=False)


if __name__ == "__main__":
    filter_vars()
