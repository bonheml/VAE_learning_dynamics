#!/usr/bin/env python
import logging
import pathlib
import hydra
from hydra.utils import instantiate
import numpy as np
from omegaconf import OmegaConf
from sklearn.neighbors import NearestNeighbors
import pandas as pd

logger = logging.getLogger("similarity_from_sa")


def get_model_info(model_file):
    fpath = pathlib.Path(model_file).parts
    return {"source_dataset": fpath[-6], "target_dataset": fpath[-5], "model_name": fpath[-4],
            "seed": int(fpath[-2].replace("seed_", "")),
            "param_value": float(fpath[-3].replace("param_", "")),
            "latent_shape": int(fpath[-7].replace("latent_", ""))}


@hydra.main(config_path="config", config_name="similarity_from_sa")
def compute_sim_from_sa(cfg):
    logger.info("Experiment config:\n{}".format(OmegaConf.to_yaml(cfg)))
    random_state = np.random.RandomState(cfg.seed)
    logger.info("Instantiating {}...".format(cfg.similarity_metric.name))
    metric = instantiate(cfg.similarity_metric)
    m1_acts = np.load(cfg.m1_acts_path)
    n_mean = NearestNeighbors(n_neighbors=1)
    n_mean.fit(m1_acts["encoder/z_mean"])
    res = []
    m2_acts = np.load(cfg.m2_acts_path)
    m2_info = get_model_info(cfg.m2_acts_path)
    m2_info["metric"] = metric.name
    dist, idxs = n_mean.kneighbors(m2_acts["encoder/z_mean"])
    logger.info("The average distance between source and target latents is {}".format(np.mean(dist)))
    idxs = idxs.flatten()
    logger.debug(idxs[:10])
    m1_acts_ordered = m1_acts["encoder/z_mean"][idxs]
    logger.info("Computing similarity of mean representations")
    m2_info["mean_sim"] = metric(m1_acts_ordered, m2_acts["encoder/z_mean"])
    m2_info["mean_sim_agg"] = np.sum(m2_info["mean_sim"])
    m2_info["mean_sim_avg"] = np.mean(m2_info["mean_sim"])
    m2_info["mean_sim_avg"] = np.std(m2_info["mean_sim"])
    m2_info["mean_sim_squared_agg"] = np.sum(m2_info["mean_sim"] ** 2)
    # logger.info("Computing similarity of log variance representations")
    # m2_info["logvar_sim"] = metric(m1_acts["encoder/z_log_var"], m2_acts["encoder/z_log_var"])
    # m2_info["logvar_sim_agg"] = np.sum(m2_info["logvar_sim"])
    # m2_info["logvar_sim_squared_agg"] = np.sum(m2_info["logvar_sim"] ** 2)
    # logger.info("Computing similarity of sampled representations")
    # m2_info["z_sim"] = metric(m1_acts["sampling"], m2_acts["sampling"])
    # m2_info["z_sim_agg"] = np.sum(m2_info["z_sim"])
    # m2_info["z_sim_squared_agg"] = np.sum(m2_info["z_sim"] ** 2)
    res.append(m2_info)

    df = pd.DataFrame.from_records(res)
    df.to_csv(cfg.save_file, sep="\t", index=False)


if __name__ == "__main__":
    compute_sim_from_sa()
