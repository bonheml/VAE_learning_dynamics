#!/usr/bin/env python
import logging
import pathlib
import hydra
from hydra.utils import instantiate
import numpy as np
from omegaconf import OmegaConf

from vae_ld.data.util import get_unique_samples
from vae_ld.learning_dynamics.utils import get_file_list, get_model_filename, get_model_epoch, get_activations, \
    prepare_activations
import pandas as pd

logger = logging.getLogger("similarity_from_sa")


def get_model_info(model_file):
    fpath = pathlib.Path(model_file).parts
    return {"source_dataset": fpath[-6], "target_dataset": fpath[-5], "model_name": fpath[-4],
            "seed": int(fpath[-2].replace("seed_", "")),
            "param_value": float(fpath[-3].replace("param_", "")),
            "latent_shape": int(fpath[-7].replace("latent_", ""))}


@hydra.main(config_path="config", config_name="similarity_from_sa")
def compute_sim_from_sa(cfg):
    logger.info("Experiment config:\n{}".format(OmegaConf.to_yaml(cfg)))
    random_state = np.random.RandomState(cfg.seed)
    logger.info("Instantiating {}...".format(cfg.similarity_metric.name))
    metric = instantiate(cfg.similarity_metric)
    m1_acts = np.load(cfg.m1_acts_path)
    res = []
    m2_acts = np.load(cfg.m2_acts_path)
    m2_info = get_model_info(cfg.m2_acts_path)
    m2_info["metric"] = metric.name
    m2_info["mean_sim"] = metric(m1_acts["encoder/z_mean"], m2_acts["encoder/z_mean"])
    m2_info["mean_sim_agg"] = np.sum(m2_info["mean_sim"])
    m2_info["mean_sim_squared_agg"] = np.sum(m2_info["mean_sim"] ** 2)
    m2_info["logvar_sim"] = metric(m1_acts["encoder/z_log_var"], m2_acts["encoder/z_log_var"])
    m2_info["logvar_sim_agg"] = np.sum(m2_info["logvar_sim"])
    m2_info["logvar_sim_squared_agg"] = np.sum(m2_info["logvar_sim"] ** 2)
    m2_info["z_sim"] = metric(m1_acts["sampling"], m2_acts["sampling"])
    m2_info["z_sim_agg"] = np.sum(m2_info["z_sim"])
    m2_info["z_sim_squared_agg"] = np.sum(m2_info["z_sim"] ** 2)
    res.append(m2_info)

    pd.set_option('display.max_columns', 20)

    df = pd.DataFrame.from_records(res)
    logger.info(df)
    df.to_csv(cfg.save_file, sep="\t", index=False)


if __name__ == "__main__":
    compute_sim_from_sa()
