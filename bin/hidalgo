import logging
import hydra
import numpy as np
import pandas as pd
from hydra.utils import instantiate
from omegaconf import OmegaConf
from vae_ld.learning_dynamics.intrinsic_dimension_estimators import Hidalgo

logger = logging.getLogger("get_data_multi_ide")


@hydra.main(config_path="config", config_name="hidalgo")
def compute_hidalgo(cfg):
    seed = np.random.RandomState(cfg.seed)
    logger.info("Model config:\n{}".format(OmegaConf.to_yaml(cfg)))
    ide = Hidalgo(k=cfg.n_manifolds)
    logger.info("Loading {}".format(cfg.dataset.name))
    dataset = instantiate(cfg.dataset)
    X = dataset.sample(cfg.n_samples, seed)[1]
    X = np.unique(X.reshape(X.shape[0], np.prod(X.shape[1:])), axis=0)
    if cfg.normalized is False:
        X *= 255.
    logger.info("Discarding duplicate examples. Final size is {}".format(len(X)))
    logger.info("Computing Hidalgo for {} manifolds".format(cfg.n_manifolds))
    res = ide.fit(X)
    logger.info("Saving the results to {}".format(cfg.save_file))
    df = pd.DataFrame([res])
    df.to_csv(cfg.save_file, sep="\t")


if __name__ == "__main__":
    compute_hidalgo()
