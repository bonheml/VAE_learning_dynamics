#!/usr/bin/env python
import logging
from pathlib import Path
import hydra
import tensorflow as tf
import numpy as np
from hydra.utils import instantiate
from omegaconf import OmegaConf

logger = logging.getLogger(__name__)


@hydra.main(config_path="config/training/config.yaml")
def train(cfg):
    print("\n{0}\n{2:^80}\n{1}\n{3}{1}\n".format("-" * 80, "=" * 80, "Current model config", cfg.pretty()))
    logger.info("Ensuring Tensorflow and Numpy are seeded...")
    np.random.seed(cfg.hyperparameters.seed)
    tf.random.set_seed(cfg.hyperparameters.seed)

    # Define aliases for cfg values of recurring usage
    model_params = {"reconstruction_loss_fn": instantiate(cfg.reconstruction_loss)}

    logger.info("Creating the encoder...")
    encoder = instantiate(cfg.model.encoder)
    model_params["encoder"] = encoder.build()
    model_params["encoder"].summary()

    logger.info("Creating the decoder...")
    decoder = instantiate(cfg.model.decoder)
    model_params["decoder"] = decoder.build()
    model_params["decoder"].summary()

    # Enabling creation of new config keys
    OmegaConf.set_struct(cfg, False)
    # Create params key if it does not exists
    if cfg.model.params is None:
        cfg.model.params = {}

    # Create a discriminator the VAE architecture requires it (e.g. factorVAE)
    if cfg.model.discriminator is not None:
        logger.info("Creating the discriminator...")
        discriminator = instantiate(cfg.model.discriminator)
        model_params["discriminator"] = discriminator
        model_params["discriminator"].summary()

    # Disabling creation of new config keys
    OmegaConf.set_struct(cfg, True)

    logger.info("Creating the optimiser and callbacks...")
    optimizer = instantiate(cfg.optimizer)
    callbacks = [instantiate(callback) for callback in cfg.callbacks.cls]

    logger.info("Creating subdirectories for callback logs...")
    for folder in cfg.callbacks.subdirs:
        path = Path(folder)
        path.mkdir(parents=True, exist_ok=True)

    logger.info("Retrieving the data...")
    data_loader = instantiate(cfg.dataset)
    data = data_loader.load_data()

    logger.info("Creating the model...")
    model_cls = hydra.utils.get_class(cfg.model["class"])
    model = model_cls(**cfg.model.params, **model_params)
    model.compile(optimizer=optimizer, run_eagerly=cfg.hyperparameters.save_activations)

    logger.info("Starting model training...")
    model.fit(data, epochs=cfg.hyperparameters.epochs, batch_size=cfg.hyperparameters.batch_size, callbacks=callbacks)


if __name__ == "__main__":
    train()
