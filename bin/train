#!/usr/bin/env python
from pathlib import Path

import hydra
import tensorflow as tf
import numpy as np
from hydra.utils import instantiate


@hydra.main(config_path="config/training/config.yaml")
def train(cfg):
    print("{0}\n{2:^80}\n{1}\n{3}{1}\n".format("-" * 80, "=" * 80, "Current model config", cfg.pretty()))

    np.random.seed(cfg.hyperparameters.seed)
    tf.random.set_seed(cfg.hyperparameters.seed)
    latent_shape = cfg.hyperparameters.latent_shape
    input_shape = cfg.dataset.params.observation_shape
    save = cfg.hyperparameters.save_activations

    data_loader = instantiate(cfg.dataset)
    data = data_loader.load_data()

    optimizer = instantiate(cfg.optimizer)
    rec_loss = instantiate(cfg.reconstruction_loss)
    callbacks = [instantiate(callback) for callback in cfg.callbacks.cls]
    for folder in cfg.callbacks.subdirs:
        path = Path(folder)
        path.mkdir(parents=True, exist_ok=True)

    encoder = instantiate(cfg.model.encoder, input_shape=input_shape, output_shape=latent_shape, save_activations=save)
    encoder = encoder.build()
    encoder.summary()

    decoder = instantiate(cfg.model.decoder, input_shape=(latent_shape,), output_shape=input_shape,
                          save_activations=save)
    decoder = decoder.build()
    decoder.summary()

    model_cls = hydra.utils.get_class(cfg.model["class"])
    model = model_cls(encoder=encoder, decoder=decoder, reconstruction_loss_fn=rec_loss, save_activations=save)
    model.compile(optimizer=optimizer, run_eagerly=save)
    model.fit(data, epochs=cfg.hyperparameters.epochs, batch_size=cfg.hyperparameters.batch_size, callbacks=callbacks)


if __name__ == "__main__":
    train()
