import logging

import hydra
import numpy as np
import pandas as pd
from hydra.utils import instantiate
from omegaconf import OmegaConf
from sklearn.decomposition import PCA
from vae_ld.learning_dynamics.intrinsic_dimension_estimators import TwoNN

logger = logging.getLogger("get_data_ide")


def estimate_id(data, ide, pca):
    res = {"twonn": [],
           #"pca": []
           }
    X = data[:100000]
    X = X.reshape((X.shape[0], np.prod(X.shape[1:])))
    for i in [100, 1000, 10000, 100000]:
        logger.info("Computing TwoNN ID estimate for {} with i={}".format(data.name, i))
        res["twonn"].append(ide.get_id_estimate(X[:i]))
        logger.info("TwoNN ID estimate is {}".format(res["twonn"][-1]))
        #logger.info("Computing PCA ID estimate for {} with i={}".format(data.name, i))
        #pca.fit(X[:i])
        #res["pca"].append(pca.n_components_)
        #logger.info("PCA ID estimate is {}".format(res["pca"][-1]))
    return res


@hydra.main(config_path="config/data_ide", config_name="config")
def get_all_ides(cfg):
    logger.info("Model config:\n{}".format(OmegaConf.to_yaml(cfg)))
    twonn = TwoNN()
    seed = np.random.RandomState(0)
    pca = PCA(n_components=0.9, random_state=seed)
    logger.info("Retrieving the data...")
    dataset = instantiate(cfg.data)
    logger.info("Computing the ID estimates")
    ides = estimate_id(dataset, twonn, pca)
    df = pd.DataFrame(ides)
    df.to_csv(cfg.save_file, sep="\t")


if __name__ == "__main__":
    get_all_ides()
