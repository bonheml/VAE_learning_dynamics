import logging

import hydra
import numpy as np
import pandas as pd
from hydra.utils import instantiate
from omegaconf import OmegaConf
from sklearn.decomposition import PCA
from vae_ld.learning_dynamics.intrinsic_dimension_estimators import TwoNN

logger = logging.getLogger("get_data_ide")


def estimate_id(data, ide, seed, n_samples=10000):
    res = {data.name: []}
    for i in range(20):
        X = data.sample(n_samples, seed)[1]
        X = X.reshape(X.shape[0], np.prod(X.shape[1:]))
        logger.info("Computing TwoNN ID estimate for {} and seed {}".format(data.name, i))
        res[data.name].append(ide.get_id_estimate(X))
        logger.info("TwoNN ID estimate is {}".format(res[data.name][-1]))
    return res


@hydra.main(config_path="config/data_ide", config_name="config")
def get_all_ides(cfg):
    logger.info("Model config:\n{}".format(OmegaConf.to_yaml(cfg)))
    twonn = TwoNN()
    seed = np.random.RandomState(cfg.seed)
    logger.info("Retrieving the data...")
    dataset = instantiate(cfg.data)
    logger.info("Computing the ID estimates")
    ides = estimate_id(dataset, twonn, seed, cfg.n_samples)
    df = pd.DataFrame(ides)
    df.to_csv(cfg.save_file, sep="\t")


if __name__ == "__main__":
    get_all_ides()
